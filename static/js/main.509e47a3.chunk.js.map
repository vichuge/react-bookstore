{"version":3,"sources":["components/Book.js","actionTypes.js","actions/index.js","containers/BooksList.js","containers/BookForm.js","components/App.js","reducers/books.js","reducers/index.js","index.js"],"names":["Book","book","handleRemoveBook","title","category","type","onClick","className","id","CREATE_BOOK","REMOVE_BOOK","createBook","payload","mapDispatchToProps","deleteBook","connect","state","books","map","useState","setTitle","setCategory","onSubmit","e","preventDefault","htmlFor","placeholder","onChange","target","value","required","name","App","initialState","action","filter","rootReducer","combineReducers","booksReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","dispatch","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.509e47a3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Book = ({ book, handleRemoveBook }) => {\n  const handleBookRemove = () => {\n    handleRemoveBook(book);\n  };\n  return (\n    <tr key={book.id}>\n      <td>{book.title}</td>\n      <td>{book.category}</td>\n      <td><button type=\"button\" onClick={handleBookRemove} className=\"btn btn-danger\">Delete</button></td>\n    </tr>\n  );\n};\n\nBook.propTypes = {\n  book: PropTypes.objectOf(Object).isRequired,\n  handleRemoveBook: PropTypes.func.isRequired,\n};\n\nexport default Book;\n","export const CREATE_BOOK = 'CREATE_BOOK';\nexport const REMOVE_BOOK = 'REMOVE_BOOK';\n","import { CREATE_BOOK, REMOVE_BOOK } from '../actionTypes';\n\nexport const createBook = (book) => ({\n  type: CREATE_BOOK,\n  payload: book,\n});\n\nexport const deleteBook = (book) => ({\n  type: REMOVE_BOOK,\n  payload: book,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Book from '../components/Book';\nimport { deleteBook } from '../actions';\n\nconst BooksList = ({ books, deleteBook }) => {\n  const handleRemoveBook = (book) => {\n    deleteBook(book);\n  };\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Category</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          books.map((book) => (\n            <Book\n              key={book.id}\n              book={book}\n              handleRemoveBook={handleRemoveBook}\n            />\n          ))\n\n        }\n      </tbody>\n    </table>\n  );\n};\n\nBooksList.propTypes = {\n  books: PropTypes.objectOf(PropTypes.array).isRequired,\n  deleteBook: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ books: state.books });\nconst mapDispatchToProps = { deleteBook };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createBook } from '../actions';\n\nconst BookForm = ({ createBook }) => {\n  const [title, setTitle] = useState('');\n  const [category, setCategory] = useState('');\n  const categories = [\n    'Action',\n    'Biography',\n    'Comedy',\n    'Drama',\n    'Fantasy',\n    'Google',\n    'Horror',\n  ];\n  const handleChange = (e) => {\n    setTitle(e.target.value);\n  };\n  const handleChangeSelect = (e) => {\n    setCategory(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    createBook({\n      title,\n      category,\n    });\n    setTitle('');\n    setCategory('');\n    e.preventDefault();\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label htmlFor=\"title\">\n          Title\n          <input placeholder=\"Add a title...\" className=\"form-control\" id=\"title\" type=\"text\" onChange={handleChange} value={title} required />\n        </label>\n      </div>\n      <div className=\"form-group mt-2\">\n        <label htmlFor=\"category\">\n          Category\n          <select className=\"form-control\" onChange={handleChangeSelect} required value={category}>\n            <option key=\"default\" value=\"\">Select one...</option>\n            {\n              categories.map((name) => <option key={name} value={name}>{name}</option>)\n            }\n          </select>\n        </label>\n      </div>\n      <input type=\"submit\" value=\"Create new book\" className=\"btn btn-primary mt-3\" />\n    </form>\n  );\n};\n\nBookForm.propTypes = {\n  createBook: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = {\n  createBook,\n};\n\nexport default connect(null, mapDispatchToProps)(BookForm);\n","import React from 'react';\nimport BooksList from '../containers/BooksList';\nimport BookForm from '../containers/BookForm';\n\nconst App = () => (\n  <div>\n    <BooksList />\n    <BookForm />\n  </div>\n);\n\nexport default App;\n","import { CREATE_BOOK, REMOVE_BOOK } from '../actionTypes';\n\nconst initialState = [\n  { id: 1, title: 'title 1', category: 'Action' },\n  { id: 2, title: 'title 2', category: 'Biography' },\n];\n\nconst books = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_BOOK:\n      return [...state, action.payload];\n    case REMOVE_BOOK:\n      return state.filter((book) => book.id !== action.payload.id);\n    default:\n      return state;\n  }\n};\n\nexport default books;\n","import { combineReducers } from 'redux';\n\nimport booksReducer from './books';\n\nconst rootReducer = combineReducers({\n  books: booksReducer,\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport App from './components/App';\nimport rootReducer from './reducers';\nimport { createBook } from './actions';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nconst firstElements = [\n  { id: 3, title: 'title 3', category: 'Comedy' },\n  { id: 4, title: 'title 4', category: 'Drama' },\n];\n\nfirstElements.map((book) => store.dispatch(createBook(book)));\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement,\n);\n"],"sourceRoot":""}